%Assumptions and requirements
%   Assumes input files have background subtracted means listed in *corrected_intensity.txt format 
%       (generated by preprocessing_final.m code)
%   Assumes known activation timing (see variable last_point_off)
%   Requires code file trim_decay.m

% This code currently will, when a folder is selected, analyze the data
% files contained in that folder.  It will then sort the genotypes into the
% appropriate folders one level up.  
% THIS CODE WILL NOT WORK FOR ATP-RELEASE DATA

% Depends on uigetdirMultiSelect.m as found here: http://stackoverflow.com/a/39566579
% (Answer by Nils).
% 
%If errors, type current_file into command prompt to ID problem file
%

normalized = true;
homefolder = pwd;
lower_threshold = 0.2;
upper_threshold = 0.8;
last_point_off = 6; % Activation happens immediately afterwards

resampling_rate = 10; %(measured in ms) - should be fiddled with
smoothing_parameter = 21; % measured in units of the resampling_rate - 
% a smoothing parameter of 5 and a resampling rate of 200 ms gives a
% smoothing window of length 1000 ms. - must be odd

axis_mat = [0 25000 -100 300]; % Defines axes for plotting [xmin xmax ymin ymax]
axis_mat_norm = [0 25000 0 1]; 

% Picking a set of folders that contain the *_corrected_intensity.txt files;
folder_list = uigetdirMultiSelect;

figure(1) % Each plot individually
clf; 
figure(3) % WT_genotype
clf;
figure(4) % KO_genotype
clf;
figure(5) % Inv+
clf;

for folder_index = 1:length(folder_list);
    
    % Moving into the current folder
    folder_name = folder_list{folder_index};
cd(folder_name);

%%%% Obtaining the intensity files to analyze
file_list = dir('*corrected_intensity.txt'); 
file_list = {file_list(:).name};

%%% Collect timepoint files (assumes it has the format '*_elapsed_time.txt' )
timelist = dir('*_elapsed_time.txt');
timelist = {timelist(:).name};

ratio_list = zeros(size(file_list));
for file_index = 1:length(file_list)
    %%% reading in the data
    current_file = file_list{file_index};
    corrected_average = importdata(current_file);
    corrected_average_old = corrected_average;
    time_course_file = strrep(current_file,'_corrected_intensity.txt','_elapsed_time.txt');
    timedata = importdata(time_course_file);
    
    if isstruct(timedata)
        timedata=timedata.data;
    end
    
    % temporary measure for dealing with short timecourses
    if(length(timedata) < 25)
        continue; 
    end
    
    % In case time is measured in seconds rather than milliseconds
    if max(timedata)< 1000;
        timedata = timedata*1000;
    end
    
    %%%% Taking care of the fact that the average sometimes has an extra
    %%%% zero at the end (relic of copying and pasting background
    %%%% subtraction in Excel; unlikely to be used with preprocessing files)
    if corrected_average(end) == 0 || isnan(corrected_average(end));
        corrected_average = corrected_average(1:end-1);
    end

   % resamples the data over evenly spaced intervals
   spline_points = min(timedata):resampling_rate:max(timedata);
   spline_intensity = spline(timedata,corrected_average);
   resampled_points = ppval(spline_intensity,spline_points);
   resampled_points = smooth(resampled_points, smoothing_parameter);
   
   % Normalizing data to the level it was prior to activation
    resampled_points = resampled_points - resampled_points(last_point_off);
    if normalized
        resampled_points = resampled_points./max(resampled_points);
    end
   


    file_name_start = strrep(current_file, '_corrected_intensity.txt','');

    figure(1); % plotting the trace individually
   clf
   hold on;
   plot(spline_points,resampled_points);
   
    title(file_name_start,'FontSize',24,'Interpreter','none');
   if ~normalized
    axis(axis_mat); 
   else 
       axis(axis_mat_norm);
   end
    %colorbar;
    drawnow;

   if ~isempty(regexpi(file_name_start,'wt'))
   figure(3)
    hold on;
   plot(spline_points,resampled_points);
   title('WT','FontSize',24,'Interpreter','none');
   end
    if ~isempty(regexpi(file_name_start,'ko'))
   figure(4)
    hold on;
   plot(spline_points,resampled_points);
   title('KO','FontSize',24,'Interpreter','none');
   end
    if ~isempty(regexpi(file_name_start,'inv'))
   figure(4)
    hold on;
   plot(spline_points,resampled_points);
   title('INV','FontSize',24,'Interpreter','none');
   end
   if ~normalized
    axis(axis_mat);
   else 
       axis(axis_mat_norm);
   end
   drawnow;
   
    first_on_index = find(resampled_points>lower_threshold*max(resampled_points(:)),1,'first');
    start_max_index = find(resampled_points>upper_threshold*max(resampled_points(:)),1,'first'); 
    stop_max_index = find(resampled_points<upper_threshold*max(resampled_points(:)));
    stop_max_index = min(stop_max_index(stop_max_index > start_max_index));
    
    last_on_index = find(resampled_points<lower_threshold*max(resampled_points(:)));
    last_on_index = min(last_on_index(last_on_index > stop_max_index));
    
    figure(1);
    scatter(spline_points([start_max_index stop_max_index]),resampled_points([start_max_index stop_max_index]),1000,'r.');
    scatter(spline_points([first_on_index last_on_index]),resampled_points([first_on_index last_on_index]),1000,'g.');
    drawnow;
    
     %%%% Outputting results

    xlabel('Time (ms)','FontSize',18);
    ylabel('Fluorescent Intensity', 'FontSize',18);
    set(gca,'FontSize',14);
    ax = gca;
 ax.XTick = ((0:2)*10^4);
  %  mkdir('./Plots');
    
   
% %     p2p_raw = peak_stop_raw-peak_start_raw;
    first_on = spline_points(first_on_index);
    start_max = spline_points(start_max_index);
    stop_max = spline_points(stop_max_index);
    last_on = spline_points(last_on_index);
   
   
  
    % Below code is plotting and outputting results
     
     if ~isempty(regexpi(file_name_start,'ko'))
         genotype_folder = '../KO';
       
     else if ~isempty(regexpi(file_name_start,'wt'))
         genotype_folder = '../WT';
        
         else if ~isempty(regexpi(file_name_start,'inv'))
         genotype_folder = '../INV';
        
             else
                 genotype_folder = '../Genotype_unspecified';
             end
         end
     end
     mkdir(genotype_folder)
     
     mkdir(strcat(genotype_folder,'/Plots'));
     print(figure(1), strcat(genotype_folder,'/Plots/',file_name_start),'-dpng');
 
     
         textfile = strcat(genotype_folder,'/RESULTS',file_name_start,'.txt');
     matfile = strcat(genotype_folder,'/RESULTS',file_name_start,'.mat');
             
     if isempty(last_on)
         last_on = nan;
          disp(file_name_start);
       disp('Does not return to base');
       textfile = strcat(genotype_folder,'/RESULTS_IncompleteDecline',file_name_start,'.txt');
     end
     
      labels = {'Filling Start';'Peak Start';'Peak End'; 'Emptying End'; 'Filling Time'; 'Peak Duration'; ...
          'Emptying Time'; 'Baseline Intensity'; 'Max Intensity'; 'Final Intensity'};
      results_data = [first_on;start_max;stop_max;last_on;start_max-first_on;stop_max-start_max;...
          last_on - stop_max; min(corrected_average); max(corrected_average); corrected_average(end)];
      results_table = table(labels,results_data);
       writetable(results_table, textfile);
       save(matfile,'first_on','start_max','stop_max','last_on','corrected_average','resampled_points','spline_points');
end

cd(homefolder);
end
cd(genotype_folder);
cd('..');
mkdir('Plots');
cd('Plots');
mkdir('genotype');
print(figure(3), strcat('genotype/','WT'),'-dpng');
print(figure(4), strcat('genotype/','KO'),'-dpng');
print(figure(5), strcat('genotype/','INV'),'-dpng');

